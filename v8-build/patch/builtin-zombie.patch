From fcf33a9ac6c7d9bbd02344902955c01708596a78 Mon Sep 17 00:00:00 2001
From: zombieyang <zombieyang@tencent.com>
Date: Thu, 27 May 2021 16:19:34 +0800
Subject: [PATCH] builtin zombie

---
 src/builtins/builtins-definitions.h | 1 +
 src/builtins/builtins-string.cc     | 6 ++++++
 src/compiler/typer.cc               | 2 ++
 src/init/bootstrapper.cc            | 3 +++
 4 files changed, 12 insertions(+)

diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index b0e608418e..2e4a456b2e 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -822,6 +822,7 @@ namespace internal {
   TFJ(StringPrototypeSplit, kDontAdaptArgumentsSentinel)                       \
   /* ES6 #sec-string.raw */                                                    \
   CPP(StringRaw)                                                               \
+  CPP(StringZombie)                                                            \
                                                                                \
   /* Symbol */                                                                 \
   /* ES #sec-symbol-constructor */                                             \
diff --git a/src/builtins/builtins-string.cc b/src/builtins/builtins-string.cc
index 7fd1c76381..c3b20a2d31 100644
--- a/src/builtins/builtins-string.cc
+++ b/src/builtins/builtins-string.cc
@@ -486,5 +486,11 @@ BUILTIN(StringRaw) {
   RETURN_RESULT_OR_FAILURE(isolate, result_builder.Finish());
 }
 
+BUILTIN(StringZombie)
+{
+  HandleScope scope(isolate);
+  return *isolate->factory()->NewNumber(2.0);
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc
index 0f18222236..ff32951718 100644
--- a/src/compiler/typer.cc
+++ b/src/compiler/typer.cc
@@ -1630,6 +1630,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
     case Builtins::kStringPrototypeEndsWith:
     case Builtins::kStringPrototypeIncludes:
       return Type::Boolean();
+    case Builtins::kStringZombie:
+      return Type::Number();
     case Builtins::kStringRaw:
     case Builtins::kStringRepeat:
     case Builtins::kStringPrototypeSlice:
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index 7b1e7a196b..4ec97c65a5 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -2000,6 +2000,9 @@ void Genesis::InitializeGlobal(Handle<JSGlobalObject> global_object,
     // Install the String.raw function.
     SimpleInstallFunction(isolate_, string_fun, "raw", Builtins::kStringRaw, 1,
                           false);
+    // Install the String.raw function.
+    SimpleInstallFunction(isolate_, string_fun, "zombie", Builtins::kStringZombie, 1,
+                          false);
 
     // Create the %StringPrototype%
     Handle<JSPrimitiveWrapper> prototype = Handle<JSPrimitiveWrapper>::cast(
-- 
2.30.1 (Apple Git-130)

